// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"swapcore/Core/DB/ent/network"
	"swapcore/Core/DB/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NetworkUpdate is the builder for updating Network entities.
type NetworkUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkMutation
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nu *NetworkUpdate) Where(ps ...predicate.Network) *NetworkUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetNetworkID sets the "NetworkID" field.
func (nu *NetworkUpdate) SetNetworkID(i int) *NetworkUpdate {
	nu.mutation.ResetNetworkID()
	nu.mutation.SetNetworkID(i)
	return nu
}

// AddNetworkID adds i to the "NetworkID" field.
func (nu *NetworkUpdate) AddNetworkID(i int) *NetworkUpdate {
	nu.mutation.AddNetworkID(i)
	return nu
}

// SetName sets the "name" field.
func (nu *NetworkUpdate) SetName(s string) *NetworkUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetSymbol sets the "symbol" field.
func (nu *NetworkUpdate) SetSymbol(s string) *NetworkUpdate {
	nu.mutation.SetSymbol(s)
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NetworkUpdate) SetCreatedAt(t time.Time) *NetworkUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NetworkUpdate) SetNillableCreatedAt(t *time.Time) *NetworkUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NetworkUpdate) SetUpdatedAt(t time.Time) *NetworkUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// Mutation returns the NetworkMutation object of the builder.
func (nu *NetworkUpdate) Mutation() *NetworkMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NetworkUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NetworkUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NetworkUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NetworkUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NetworkUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := network.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NetworkUpdate) check() error {
	if v, ok := nu.mutation.NetworkID(); ok {
		if err := network.NetworkIDValidator(v); err != nil {
			return &ValidationError{Name: "NetworkID", err: fmt.Errorf(`ent: validator failed for field "Network.NetworkID": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Name(); ok {
		if err := network.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Network.name": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Symbol(); ok {
		if err := network.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Network.symbol": %w`, err)}
		}
	}
	return nil
}

func (nu *NetworkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.NetworkID(); ok {
		_spec.SetField(network.FieldNetworkID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedNetworkID(); ok {
		_spec.AddField(network.FieldNetworkID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(network.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Symbol(); ok {
		_spec.SetField(network.FieldSymbol, field.TypeString, value)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(network.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(network.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NetworkUpdateOne is the builder for updating a single Network entity.
type NetworkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkMutation
}

// SetNetworkID sets the "NetworkID" field.
func (nuo *NetworkUpdateOne) SetNetworkID(i int) *NetworkUpdateOne {
	nuo.mutation.ResetNetworkID()
	nuo.mutation.SetNetworkID(i)
	return nuo
}

// AddNetworkID adds i to the "NetworkID" field.
func (nuo *NetworkUpdateOne) AddNetworkID(i int) *NetworkUpdateOne {
	nuo.mutation.AddNetworkID(i)
	return nuo
}

// SetName sets the "name" field.
func (nuo *NetworkUpdateOne) SetName(s string) *NetworkUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetSymbol sets the "symbol" field.
func (nuo *NetworkUpdateOne) SetSymbol(s string) *NetworkUpdateOne {
	nuo.mutation.SetSymbol(s)
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NetworkUpdateOne) SetCreatedAt(t time.Time) *NetworkUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NetworkUpdateOne) SetNillableCreatedAt(t *time.Time) *NetworkUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NetworkUpdateOne) SetUpdatedAt(t time.Time) *NetworkUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// Mutation returns the NetworkMutation object of the builder.
func (nuo *NetworkUpdateOne) Mutation() *NetworkMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NetworkUpdate builder.
func (nuo *NetworkUpdateOne) Where(ps ...predicate.Network) *NetworkUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NetworkUpdateOne) Select(field string, fields ...string) *NetworkUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Network entity.
func (nuo *NetworkUpdateOne) Save(ctx context.Context) (*Network, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NetworkUpdateOne) SaveX(ctx context.Context) *Network {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NetworkUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NetworkUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NetworkUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := network.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NetworkUpdateOne) check() error {
	if v, ok := nuo.mutation.NetworkID(); ok {
		if err := network.NetworkIDValidator(v); err != nil {
			return &ValidationError{Name: "NetworkID", err: fmt.Errorf(`ent: validator failed for field "Network.NetworkID": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Name(); ok {
		if err := network.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Network.name": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Symbol(); ok {
		if err := network.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Network.symbol": %w`, err)}
		}
	}
	return nil
}

func (nuo *NetworkUpdateOne) sqlSave(ctx context.Context) (_node *Network, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(network.Table, network.Columns, sqlgraph.NewFieldSpec(network.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Network.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, network.FieldID)
		for _, f := range fields {
			if !network.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != network.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.NetworkID(); ok {
		_spec.SetField(network.FieldNetworkID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedNetworkID(); ok {
		_spec.AddField(network.FieldNetworkID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(network.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Symbol(); ok {
		_spec.SetField(network.FieldSymbol, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(network.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(network.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Network{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{network.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
